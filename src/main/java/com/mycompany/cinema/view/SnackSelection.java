package com.mycompany.cinema.view;

import com.mycompany.cinema.ProduitSnack;
import com.mycompany.cinema.service.ClientService;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

public class SnackSelection extends javax.swing.JPanel {

    // --- DEBUT DE LA PARTIE MANUELLE ---
    private final ClientService clientService;
    private final List<ProduitSnack> listeProduitsAffiches = new ArrayList<>();
    private final List<JSpinner> listeSpinners = new ArrayList<>();
    private static final DecimalFormat CURRENCY_FORMATTER = new DecimalFormat("#,##0.00 €");

    public interface SnackSelectionListener {

        void onSnackSelectionCompleted(List<LignePanier> cart);
    }
    private SnackSelectionListener listener;

    public interface NavigationListener {

        void onRetourToSieges();

        void onSkip();
    }
    private NavigationListener navigationListener;

    public SnackSelection(ClientService clientService) {
        this.clientService = clientService;
        initComponents();
        initialiserListeProduits();
        updateTotal();
    }

    private void initialiserListeProduits() {
        List<ProduitSnack> produits = clientService.getAllProduitsSnack();
        for (int i = 0; i < produits.size(); i++) {
            ProduitSnack produit = produits.get(i);
            if (produit.getStock() > 0) {
                produitListPanel.add(createProductPanel(produit));
                produitListPanel.add(Box.createRigidArea(new Dimension(0, 10)));
            }
        }
    }

    private JPanel createProductPanel(final ProduitSnack produit) {
        JPanel panel = new JPanel(new BorderLayout(20, 0));
        panel.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(Color.GRAY),
                BorderFactory.createEmptyBorder(5, 5, 5, 5)
        ));

        String labelText = "<html><b>" + produit.getNomProduit() + "</b><br>"
                + "<i>" + produit.getDescription() + "</i><br>"
                + "<font color='blue'>Prix: " + CURRENCY_FORMATTER.format(produit.getPrixVente()) + "</font></html>";
        JLabel productLabel = new JLabel(labelText);

        SpinnerModel spinnerModel = new SpinnerNumberModel(0, 0, produit.getStock(), 1);
        final JSpinner spinner = new JSpinner(spinnerModel);

        spinner.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent e) {
                updateTotal();
            }
        });

        listeProduitsAffiches.add(produit);
        listeSpinners.add(spinner);

        panel.add(productLabel, BorderLayout.CENTER);
        panel.add(spinner, BorderLayout.EAST);
        return panel;
    }

    private void updateTotal() {
        double total = 0.0;
        for (int i = 0; i < listeProduitsAffiches.size(); i++) {
            ProduitSnack produit = listeProduitsAffiches.get(i);
            int quantite = (Integer) listeSpinners.get(i).getValue();
            total = total + (produit.getPrixVente() * quantite);
        }
        totalLabel.setText("Total Snacks: " + CURRENCY_FORMATTER.format(total));
    }

    private List<LignePanier> getCart() {
        List<LignePanier> panier = new ArrayList<>();
        for (int i = 0; i < listeProduitsAffiches.size(); i++) {
            int quantite = (Integer) listeSpinners.get(i).getValue();
            if (quantite > 0) {
                ProduitSnack produit = listeProduitsAffiches.get(i);
                panier.add(new LignePanier(produit, quantite));
            }
        }
        return panier;
    }

    public void resetPanel() {
        for (int i = 0; i < listeSpinners.size(); i++) {
            listeSpinners.get(i).setValue(0);
        }
        updateTotal();
    }

    public void setListener(SnackSelectionListener listener) {
        this.listener = listener;
    }

    public void setNavigationListener(NavigationListener navigationListener) {
        this.navigationListener = navigationListener;
    }
    // --- FIN DE LA PARTIE MANUELLE ---

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPaneProduits = new javax.swing.JScrollPane();
        produitListPanel = new javax.swing.JPanel();
        bottomPanel = new javax.swing.JPanel();
        totalLabel = new javax.swing.JLabel();
        buttonPanel = new javax.swing.JPanel();
        retourButton = new javax.swing.JButton();
        skipButton = new javax.swing.JButton();
        validerButton = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createTitledBorder("Étape 3/3 : Ajouter une collation ?"));
        setLayout(new java.awt.BorderLayout());

        produitListPanel.setLayout(new javax.swing.BoxLayout(produitListPanel, javax.swing.BoxLayout.Y_AXIS));
        scrollPaneProduits.setViewportView(produitListPanel);

        add(scrollPaneProduits, java.awt.BorderLayout.CENTER);

        bottomPanel.setLayout(new java.awt.BorderLayout());

        totalLabel.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        totalLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        totalLabel.setText("Total Snacks : 0,00 €");
        bottomPanel.add(totalLabel, java.awt.BorderLayout.CENTER);

        buttonPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        retourButton.setText("<< Retour aux sièges");
        retourButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                retourButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(retourButton);

        skipButton.setText("Non, merci (Paiement)");
        skipButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                skipButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(skipButton);

        validerButton.setText("Valider avec snacks (Paiement) >>");
        validerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                validerButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(validerButton);

        bottomPanel.add(buttonPanel, java.awt.BorderLayout.PAGE_END);

        add(bottomPanel, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents

    private void validerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_validerButtonActionPerformed
        if (listener != null) {
            listener.onSnackSelectionCompleted(getCart());
        }// TODO add your handling code here:
    }//GEN-LAST:event_validerButtonActionPerformed

    private void skipButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_skipButtonActionPerformed
        if (navigationListener != null) {
            navigationListener.onSkip();
        }
// TODO add your handling code here:
    }//GEN-LAST:event_skipButtonActionPerformed

    private void retourButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_retourButtonActionPerformed
        if (navigationListener != null) {
            navigationListener.onRetourToSieges();
        }// TODO add your handling code here:
    }//GEN-LAST:event_retourButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bottomPanel;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JPanel produitListPanel;
    private javax.swing.JButton retourButton;
    private javax.swing.JScrollPane scrollPaneProduits;
    private javax.swing.JButton skipButton;
    private javax.swing.JLabel totalLabel;
    private javax.swing.JButton validerButton;
    // End of variables declaration//GEN-END:variables
}
