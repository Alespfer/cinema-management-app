/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package com.mycompany.cinema.view;

import com.mycompany.cinema.ProduitSnack;
import com.mycompany.cinema.Siege;
import java.awt.Frame;
import java.io.IOException; // <--- LA VOICI ! C'EST LA CORRECTION.
import java.io.File;
import java.io.FileWriter;
import java.util.List;
import java.util.Map;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;


// <-- AJOUT 1 : La classe de données est nécessaire pour que le reste du code fonctionne.
class BilletInfo {
    String filmTitre;
    String seanceDateHeure;
    String salleNumero;
    List<Siege> sieges;
    String clientNom;
    int reservationId;
    String tarifLibelle;
    String prixTotal;
    Map<ProduitSnack, Integer> panierSnacks;
}


/**
 *
 * @author albertoesperon
 */
public class Ticket extends javax.swing.JDialog {
    
    private final String contenuBillet;

    /**
     * CONSTRUCTEUR MODIFIÉ : Il accepte maintenant les données du billet.
     */
    public Ticket(java.awt.Frame parent, boolean modal, BilletInfo infos) { // <-- MODIFIÉ
        
        // On génère le texte du billet UNE SEULE FOIS.
        this.contenuBillet = buildContenuBillet(infos);
        
        // On appelle le code généré par NetBeans pour créer les composants.
        initComponents();
        
        // Une fois les composants créés, on remplit la zone de texte.
        this.BilletsTextArea.setText(contenuBillet);
        
        // Configuration finale
        this.setTitle("Confirmation de Commande");
        this.setLocationRelativeTo(parent);
    }

    Ticket(ClientMain aThis, BilletInfo infos) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        BilletsTextArea = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        exportButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(450, 600));

        BilletsTextArea.setEditable(false);
        BilletsTextArea.setColumns(20);
        BilletsTextArea.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        BilletsTextArea.setRows(5);
        jScrollPane1.setViewportView(BilletsTextArea);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel2.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        exportButton.setText("Exporter en .txt");
        exportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportButtonActionPerformed(evt);
            }
        });
        jPanel2.add(exportButton);

        closeButton.setText("Fermer");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });
        jPanel2.add(closeButton);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportButtonActionPerformed
        exportTxt();       // TODO add your handling code here:
    }//GEN-LAST:event_exportButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        // TODO add your handling code here:
        this.dispose();

    }//GEN-LAST:event_closeButtonActionPerformed

            
     // <-- AJOUT 3 : La méthode de construction du texte, déplacée au bon endroit.
    /**
     * Construit la chaîne de caractères formatée représentant le billet.
     */
    private String buildContenuBillet(BilletInfo infos) {
        String contenu = "";
        // ... (le contenu de votre méthode est parfait, pas de changement ici)
        contenu += "****************************************\n";
        contenu += "*             PISE CINEMA              *\n";
        contenu += "****************************************\n\n";
        contenu += "RÉCAPITULATIF DE COMMANDE\n";
        contenu += "----------------------------------------\n";
        contenu += "Client: " + infos.clientNom + "\n";
        contenu += "Réservation N°: " + infos.reservationId + "\n\n";
        contenu += "--- BILLETS ---\n";
        contenu += "Film: " + infos.filmTitre + "\n";
        contenu += "Séance: " + infos.seanceDateHeure + "\n";
        contenu += "Salle: " + infos.salleNumero + "\n";
        contenu += "Sièges Réservés:\n";
        for (Siege siege : infos.sieges) {
            contenu += "  - Rangée " + siege.getNumeroRangee() + ", Siège " + siege.getNumeroSiege() + "\n";
        }
        contenu += "Tarif Appliqué: " + infos.tarifLibelle + "\n";
        if (infos.panierSnacks != null && !infos.panierSnacks.isEmpty()) {
            contenu += "\n--- SNACKS ---\n";
            for(Map.Entry<ProduitSnack, Integer> entry : infos.panierSnacks.entrySet()){
                contenu += "  - " + entry.getValue() + "x " + entry.getKey().getNomProduit() + "\n";
            }
        }
        contenu += "\n----------------------------------------\n";
        contenu += "PRIX TOTAL: " + infos.prixTotal + "\n";
        contenu += "----------------------------------------\n\n";
        contenu += "Merci de votre visite et bonne séance !\n";
        return contenu;
    }

    // <-- AJOUT 4 : La logique d'exportation.
    private void exportTxt() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Enregistrer la confirmation");
        fileChooser.setSelectedFile(new File("Confirmation_Commande.txt"));
        
        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
            try (FileWriter writer = new FileWriter(fileToSave)) {
                writer.write(contenuBillet);
                JOptionPane.showMessageDialog(this, "Confirmation exportée avec succès !", "Succès", JOptionPane.INFORMATION_MESSAGE);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Erreur lors de l'exportation : " + ex.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea BilletsTextArea;
    private javax.swing.JButton closeButton;
    private javax.swing.JButton exportButton;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
