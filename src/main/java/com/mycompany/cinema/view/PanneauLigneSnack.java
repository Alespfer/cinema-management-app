/*
 * PanneauLigneSnack.java
 * Composant graphique représentant une seule ligne dans la liste de sélection des snacks.
 * Il encapsule les informations d'un produit et un spinner pour la quantité.
 */
package com.mycompany.cinema.view;

import com.mycompany.cinema.LignePanier;
import com.mycompany.cinema.ProduitSnack;
import java.text.DecimalFormat;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;

public class PanneauLigneSnack extends javax.swing.JPanel {

    private final LignePanier lignePanier;
    private static final DecimalFormat CURRENCY_FORMATTER = new DecimalFormat("#,##0.00 €");

    // Le constructeur prend en paramètre le modèle de données qu'il doit afficher.
    public PanneauLigneSnack(LignePanier lignePanier) {
        this.lignePanier = lignePanier;
        initComponents();

        ProduitSnack produit = lignePanier.getProduit();

        // Affichage 
        String labelText = "<html><b>" + produit.getNomProduit() + "</b><br>"
                + "<i>" + produit.getDescription() + "</i><br>"
                + "<font color='blue'>Prix: " + CURRENCY_FORMATTER.format(produit.getPrixVente()) + "</font></html>";
        infoLabel.setText(labelText);

        // On configure le modèle du spinner pour dicter son comportement.
        SpinnerNumberModel spinnerModel = new SpinnerNumberModel(
                lignePanier.getQuantite(), // Valeur initiale
                0, // Minimum 
                produit.getStock(), // Maximum (on ne peut pas commander plus que le stock disponible
                1 // pas de 1
        );
        quantiteSpinner.setModel(spinnerModel);

        // On ajoute un écouteur pour mettre à jour le modèle quand la vue change
        quantiteSpinner.addChangeListener(e -> {
            int nouvelleQuantite = (Integer) quantiteSpinner.getValue();
            this.lignePanier.setQuantite(nouvelleQuantite);
        });
    }

    /**
     * Retourne la quantité actuellement sélectionnée dans le spinner.
     */
    public int getQuantite() {
        return (Integer) quantiteSpinner.getValue();
    }

    /**
     * Retourne l'objet ProduitSnack associé à cette ligne.
     */
    public ProduitSnack getProduit() {
        return this.lignePanier.getProduit();
    }

    public JSpinner getSpinner() {
        return quantiteSpinner;
    }

    public void reinitialiser() {
        quantiteSpinner.setValue(0);
        this.lignePanier.setQuantite(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        infoLabel = new javax.swing.JLabel();
        quantiteSpinner = new javax.swing.JSpinner();

        setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5)));
        setLayout(new java.awt.BorderLayout());

        infoLabel.setText("jLabel1");
        add(infoLabel, java.awt.BorderLayout.CENTER);
        add(quantiteSpinner, java.awt.BorderLayout.LINE_END);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel infoLabel;
    private javax.swing.JSpinner quantiteSpinner;
    // End of variables declaration//GEN-END:variables
}
