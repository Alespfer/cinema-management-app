/*
 * PanneauListeFilms.java
 * Panneau simple affichant la liste des films à l'affiche.
 * Il est conçu pour être un composant réutilisable.
 */
package com.mycompany.cinema.view;

import com.mycompany.cinema.Film;
import com.mycompany.cinema.service.CinemaService;
import java.awt.Component;
import java.util.List;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;



public class PanneauListFilms extends javax.swing.JPanel {

    private final CinemaService cinemaService;
    private DefaultListModel<Film> filmListModel;
    private FilmSelectionListener selectionListener;

    public interface FilmSelectionListener {
        void gererFilmSelectionne(Film film);
    }

    // Constructeur
    public PanneauListFilms(CinemaService cinemaService) {
        this.cinemaService = cinemaService;
        initComponents();
        this.configurerListe();
        this.chargerFilms();
    }
    
    /**
     * Configure le modèle de la liste, son rendu et l'écouteur de sélection.
     */
    private void configurerListe() {
        filmListModel = new DefaultListModel<>();
        filmJList.setModel(filmListModel);

        // Rendu personnalisé pour n'afficher que le titre du film
        filmJList.setCellRenderer(new DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                if (value instanceof Film) {
                    setText(((Film) value).getTitre());
                }
                return this;
            }
        });

        filmJList.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting() && selectionListener != null) {
                    Film selectedFilm = filmJList.getSelectedValue();
                    if (selectedFilm != null) {
                        selectionListener.gererFilmSelectionne(selectedFilm);
                    }
                }
            }
        });
    }

    /**
     * Charge la liste des films depuis le service.
     */
    private void chargerFilms() {
        filmListModel.clear();
        List<Film> films = cinemaService.trouverFilmsAffiche();
        for (Film film : films) {
            filmListModel.addElement(film);
        }
    }

   
    public void setFilmSelectionListener(FilmSelectionListener listener) {
        this.selectionListener = listener;
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        filmJList = new javax.swing.JList<>();

        setBorder(javax.swing.BorderFactory.createTitledBorder("Films à l'affiche"));
        setLayout(new java.awt.BorderLayout());

        jScrollPane1.setViewportView(filmJList);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<com.mycompany.cinema.Film> filmJList;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
